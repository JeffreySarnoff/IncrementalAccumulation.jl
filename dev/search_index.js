var documenterSearchIndex = {"docs":
[{"location":"man/rollandrun/#rollandrun","page":"rollandrun","title":"rollandrun","text":"","category":"section"},{"location":"contributing/#contributing.md","page":"contributing.md","title":"contributing.md","text":"","category":"section"},{"location":"guide/examples/#examples","page":"Examples","title":"examples","text":"","category":"section"},{"location":"guide/examples/#Rolling-minimum-over-Float32s","page":"Examples","title":"Rolling minimum over Float32s","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"acc = AccMinimum(Float32)","category":"page"},{"location":"guide/examples/#this-is-the-way-to-get-each-new-result","page":"Examples","title":"this is the way to get each new result","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"results = similar(data)\n@inbounds for i in eachindex(data)\n    results[i] = acc(data[i])()\nend","category":"page"},{"location":"guide/examples/#this-is-the-way-to-get-the-final-result-only","page":"Examples","title":"this is the way to get the final result only","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"acc(data)","category":"page"},{"location":"guide/examples/#either-way-gets-you","page":"Examples","title":"either way gets you","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"final_minimum = acc()\ncount_minimums = acc.nmin\ncount_observations = acc.nobs","category":"page"},{"location":"guide/examples/#Rolling-meanabs-over-Float32s","page":"Examples","title":"Rolling meanabs over Float32s","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"fnx(x) = abs(x)\n\nacc = AccMean(Float32; fn=fnx)","category":"page"},{"location":"guide/examples/#this-is-the-way-to-get-each-new-result-2","page":"Examples","title":"this is the way to get each new result","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"results = similar(data)\n@inbounds for i in eachindex(data)\n    results[i] = acc(data[i])()\nend","category":"page"},{"location":"guide/examples/#this-is-the-way-to-get-the-final-result-only-2","page":"Examples","title":"this is the way to get the final result only","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"acc(data)","category":"page"},{"location":"guide/examples/#either-way-gets-you-2","page":"Examples","title":"either way gets you","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"final_mean = acc()\ncount_observations = acc.nobs","category":"page"},{"location":"guide/examples/#Rolling-sum-over-Float32s-with-missings","page":"Examples","title":"Rolling sum over Float32s with missings","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"missing replaced with prior sum","category":"page"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"fnx(x; acc=accsum) = ismissing(x) ? acc.sum : x\naccsum = AccSum(Float32; fn=fnx))\n# or (either way, the name assigned to the accumulator must appear in the fn)\naccsum = AccSum(Float32; fn=x->ismissing(x) ? accsum.sum : x))","category":"page"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"missing replaced with zero","category":"page"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"fnx(x::T; acc=accsum) where {T} = ismissing(x) ? zero(T) : x\naccsum = AccSum(Float32; fn=fnx))\n# or (either way, the name assigned to the accumulator must appear in the fn)\naccsum = AccSum(Float32; fn=x->ismissing(x) ? zero(Float32) : x))","category":"page"},{"location":"guide/examples/#this-is-the-way-to-get-each-new-result-3","page":"Examples","title":"this is the way to get each new result","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"results = similar(data)\n@inbounds for i in eachindex(data)\n    results[i] = accsum(data[i])()\nend","category":"page"},{"location":"guide/examples/#this-is-the-way-to-get-the-final-result-only-3","page":"Examples","title":"this is the way to get the final result only","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"accsum(data)","category":"page"},{"location":"guide/examples/#either-way-gets-you-3","page":"Examples","title":"either way gets you","text":"","category":"section"},{"location":"guide/examples/","page":"Examples","title":"Examples","text":"final_sum = accsum()\ncount_observations = accsum.nobs","category":"page"},{"location":"guide/guide/#Guide","page":"Guide","title":"Guide","text":"","category":"section"},{"location":"guide/guide/","page":"Guide","title":"Guide","text":"To obtain the result of a predefined incremental statistic over some vector v ``` xs = collect(1:10); accsum = AccSum(eltype(xs))","category":"page"},{"location":"guide/guide/","page":"Guide","title":"Guide","text":"function accumulate(acc, xs)     result = Vector{eltype(xs)}(undef, length(xs))     @inbounds for i in eachindex(result)         result[i] = acc(xs[i])()    # note the trailing ()     end     result end","category":"page"},{"location":"guide/guide/","page":"Guide","title":"Guide","text":"result = accumulate(accsum, xs)","category":"page"},{"location":"guide/guide/","page":"Guide","title":"Guide","text":"julia> result = accumulate(accsum, xs) 10-element Vector{Int64}:   1   3   6  10  15  21  28  36  45  55  ```","category":"page"},{"location":"guide/guide/","page":"Guide","title":"Guide","text":"Note that using eltype(xs) where xs are Ints will not work where the function generates floats. In such cases, using Acc_() will default to Float64 and using Acc_(Float32) will use Float32s.","category":"page"},{"location":"man/guide/#guide.md","page":"guide.md","title":"guide.md","text":"","category":"section"},{"location":"man/guide/","page":"guide.md","title":"guide.md","text":"These incremental accumulators of StatsBase functions are predefined:","category":"page"},{"location":"man/guide/","page":"guide.md","title":"guide.md","text":"accumulator incremental statistic\nAccCount count number of observations\nAccMinimum minimum running minimum\nAccMaximum maximum maximum\nAccSum sum sum\nAccProd prod product\nAccMean mean mean\nAccGeoMean geomean geometric mean\nAccHarmMean harmmean harmonic mean\nAccGenMean genmean generalized (power) mean\n  \nmultivalued  \nAccMeanAndVar mean_and_var mean and var\nAccMeanAndStd mean_and_std mean and std","category":"page"},{"location":"man/guide/","page":"guide.md","title":"guide.md","text":"These additional incremental accumulators are predefined:","category":"page"},{"location":"man/guide/","page":"guide.md","title":"guide.md","text":"accumulator statistic\nAccExpWtMean exponentially weighted mean\n \nmultivalued \nAccExpWtMeanAndVar exponentially weighted mean and var\nAccExpWtMeanAndStd exponentially weighted mean and std\nAccStats (; nobs, mean, var, std, skewness, kurtosis)","category":"page"},{"location":"man/guide/","page":"guide.md","title":"guide.md","text":"You can define your own incremental accumulator by following the patterns given in src/accumulators.jl.  This works best with functions for which an efficient incremental expression exists.","category":"page"},{"location":"man/predefined/#predefined","page":"predefined","title":"predefined","text":"","category":"section"},{"location":"man/predefined/","page":"predefined","title":"predefined","text":"These incremental accumulators of StatsBase functions are predefined:","category":"page"},{"location":"man/predefined/","page":"predefined","title":"predefined","text":"accumulator incremental statistic\nAccCount count number of observations\nAccMinimum minimum running minimum\nAccMaximum maximum maximum\nAccSum sum sum\nAccProd prod product\nAccMean mean mean\nAccGeoMean geomean geometric mean\nAccHarmMean harmmean harmonic mean\nAccGenMean genmean generalized (power) mean\n  \nmultivalued  \nAccMeanAndVar mean_and_var mean and var\nAccMeanAndStd mean_and_std mean and std","category":"page"},{"location":"man/predefined/","page":"predefined","title":"predefined","text":"These additional incremental accumulators are predefined:","category":"page"},{"location":"man/predefined/","page":"predefined","title":"predefined","text":"accumulator statistic\nAccExpWtMean exponentially weighted mean\n \nmultivalued \nAccExpWtMeanAndVar exponentially weighted mean and var\nAccExpWtMeanAndStd exponentially weighted mean and std\nAccStats (; nobs, mean, var, std, skewness, kurtosis)","category":"page"},{"location":"man/predefined/","page":"predefined","title":"predefined","text":"You can define your own incremental accumulator by following the patterns given in src/accumulators.jl.  This works best with functions for which an efficient incremental expression exists.","category":"page"},{"location":"#index.md","page":"Home","title":"index.md","text":"","category":"section"},{"location":"citing/#citing.md","page":"citing.md","title":"citing.md","text":"","category":"section"}]
}
